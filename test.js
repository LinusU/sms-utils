const assert = require('node:assert')

const { replaceNonGsmChars, trimTextToOneSms } = require('./')

assert.strictEqual(replaceNonGsmChars('Hello, World!'), 'Hello, World!')
assert.strictEqual(replaceNonGsmChars('Hello, a longer name!'), 'Hello, a longer name!')
assert.strictEqual(replaceNonGsmChars('Hello, Unnebäck!'), 'Hello, Unnebäck!')
assert.strictEqual(replaceNonGsmChars('Hello…'), 'Hello')
assert.strictEqual(replaceNonGsmChars('L÷iþąnœuǙs'), 'Linus')
assert.strictEqual(replaceNonGsmChars('ʘLinusʘ'), 'Linus')
assert.strictEqual(replaceNonGsmChars('ʘUnnebäckʘ'), 'Unnebäck')

assert.strictEqual(replaceNonGsmChars('Hello, World!', '?'), 'Hello, World!')
assert.strictEqual(replaceNonGsmChars('Hello, a longer name!', '?'), 'Hello, a longer name!')
assert.strictEqual(replaceNonGsmChars('Hello, Unnebäck!', '?'), 'Hello, Unnebäck!')
assert.strictEqual(replaceNonGsmChars('Hello…', '?'), 'Hello?')
assert.strictEqual(replaceNonGsmChars('L÷iþąnœuǙs', '?'), 'L?i??n?u?s')
assert.strictEqual(replaceNonGsmChars('ʘLinusʘ', '?'), '?Linus?')
assert.strictEqual(replaceNonGsmChars('ʘUnnebäckʘ', '?'), '?Unnebäck?')

assert.strictEqual(trimTextToOneSms('Hello, World!'), 'Hello, World!')
assert.strictEqual(trimTextToOneSms('Hello, a longer name!'), 'Hello, a longer name!')
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(149)}!`), `Hello, ${'A'.repeat(149)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(150)}!`), `Hello, ${'A'.repeat(150)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(151)}!`), `Hello, ${'A'.repeat(151)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(152)}!`), `Hello, ${'A'.repeat(152)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(153)}!`), `Hello, ${'A'.repeat(150)}...`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(154)}!`), `Hello, ${'A'.repeat(150)}...`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(200)}!`), `Hello, ${'A'.repeat(150)}...`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(1000)}!`), `Hello, ${'A'.repeat(150)}...`)

assert.strictEqual(trimTextToOneSms('Hello, World', '!'), 'Hello, World!')
assert.strictEqual(trimTextToOneSms('Hello, a longer name', '!'), 'Hello, a longer name!')
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(149)}`, '!'), `Hello, ${'A'.repeat(149)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(150)}`, '!'), `Hello, ${'A'.repeat(150)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(151)}`, '!'), `Hello, ${'A'.repeat(151)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(152)}`, '!'), `Hello, ${'A'.repeat(152)}!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(153)}`, '!'), `Hello, ${'A'.repeat(149)}...!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(154)}`, '!'), `Hello, ${'A'.repeat(149)}...!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(200)}`, '!'), `Hello, ${'A'.repeat(149)}...!`)
assert.strictEqual(trimTextToOneSms(`Hello, ${'A'.repeat(1000)}`, '!'), `Hello, ${'A'.repeat(149)}...!`)

assert.strictEqual(trimTextToOneSms('A'.repeat(100), 'B'.repeat(50)), `${'A'.repeat(100)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms('A'.repeat(110), 'B'.repeat(50)), `${'A'.repeat(110)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms('A'.repeat(111), 'B'.repeat(50)), `${'A'.repeat(107)}...${'B'.repeat(50)}`)

assert.strictEqual(trimTextToOneSms(`${'A'.repeat(60)}${'€'.repeat(24)}`, 'B'.repeat(50)), `${'A'.repeat(60)}${'€'.repeat(24)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`${'A'.repeat(60)}${'€'.repeat(25)}`, 'B'.repeat(50)), `${'A'.repeat(60)}${'€'.repeat(25)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`${'A'.repeat(60)}${'€'.repeat(26)}`, 'B'.repeat(50)), `${'A'.repeat(60)}${'€'.repeat(23)}...${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`${'A'.repeat(60)}${'€'.repeat(27)}`, 'B'.repeat(50)), `${'A'.repeat(60)}${'€'.repeat(23)}...${'B'.repeat(50)}`)

assert.strictEqual(trimTextToOneSms(`${'€'.repeat(25)}${'A'.repeat(50)}`, 'B'.repeat(50)), `${'€'.repeat(25)}${'A'.repeat(50)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`${'€'.repeat(25)}${'A'.repeat(60)}`, 'B'.repeat(50)), `${'€'.repeat(25)}${'A'.repeat(60)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`${'€'.repeat(25)}${'A'.repeat(61)}`, 'B'.repeat(50)), `${'€'.repeat(25)}${'A'.repeat(57)}...${'B'.repeat(50)}`)

assert.strictEqual(trimTextToOneSms('€'.repeat(40), '€'.repeat(40)), `${'€'.repeat(80)}`)
assert.strictEqual(trimTextToOneSms('€'.repeat(40), '€'.repeat(41)), `${'€'.repeat(37)}...${'€'.repeat(41)}`)
assert.strictEqual(trimTextToOneSms('€'.repeat(40), '€'.repeat(42)), `${'€'.repeat(36)}...${'€'.repeat(42)}`)

assert.strictEqual(trimTextToOneSms(`¶ ${'A'.repeat(17)}`, 'B'.repeat(50)), `¶ ${'A'.repeat(17)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`¶ ${'A'.repeat(18)}`, 'B'.repeat(50)), `¶ ${'A'.repeat(18)}${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`¶ ${'A'.repeat(19)}`, 'B'.repeat(50)), `¶ ${'A'.repeat(17)}…${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`¶ ${'A'.repeat(20)}`, 'B'.repeat(50)), `¶ ${'A'.repeat(17)}…${'B'.repeat(50)}`)
assert.strictEqual(trimTextToOneSms(`¶ ${'A'.repeat(21)}`, 'B'.repeat(50)), `¶ ${'A'.repeat(17)}…${'B'.repeat(50)}`)
